# Search a collection with a fulltext index with an attribute name and search text
name: fulltext_search
params:
  type: object
  required: ["@coll", search_attrkey, search_text]
  properties:
    "@coll":
      type: string
      title: Collection name
      examples: [ncbi_taxon, gtdb_taxon]
    search_attrkey:
      type: string
      title: Search attribute key
      examples: [scientific_name, name]
    search_text:
      type: string
      title: Search text
      examples: [escherichia, es]
      description: Text to search on the search attribute values
    ts:
      type: [integer, "null"]
      title: Versioning timestamp
      default: null
    filter_attr_expr:
      type: [array, "null"]
      title: Filter by document attribute equality
      items:
        type: object
      maxItems: 50
      examples: [
          [{"rank": "species"}, {"rank": "strain"}, {"strain": true}],
          [{"rank": "species", "strain": false}]
        ]
      default: null
      description: |
        An array of single-level objects.
        In each item object, the key-value pairs would restrict the documents to those containing all the attribute key-value pairs. 
        But if any item object in the array satisfies the document, the document is filtered into the results. 
        Basically works like a boolean expression where each key-value pair is a boolean value, each item object is a boolean term, and the array is a sum of boolean terms
    offset:
      type: [integer, "null"]
      title: Paging offset
      maximum: 100000
      default: 0
    limit:
      type: [integer, "null"]
      title: Max results to return
      default: 20
      maximum: 1000
    select:
      type: [string, array, "null"]
      items:
        type: string
      examples: [scientific_name, [scientific_name, id]]
      default: null
      description: Document attributes to keep in the results
query: |
  LET search_text__norm = REGEX_REPLACE(LOWER(TRIM(@search_text)), "\\s+", " ")
  LET search_text__first_exact_tok = REGEX_SPLIT(search_text__norm, " ")[0]
  LET search_text__icu_toks = TOKENS(@search_text, "_system::icu_tokenize")
  LET search_text__wordboundmod_icu_toks = (
      FOR tok IN search_text__icu_toks
          RETURN REGEX_REPLACE(tok, ",.*", "")  /* commas cannot be escaped */
  )
  LET search_text__fulltext = CONCAT_SEPARATOR(", ",
      FOR tok IN search_text__wordboundmod_icu_toks
          RETURN CONCAT("prefix:", tok)
  )
  LET filter_attr_expr = @filter_attr_expr ? @filter_attr_expr : []  /* null to [] */
  LET search_text__wildcard = CONCAT("%", CONCAT_SEPARATOR("%", search_text__icu_toks), "%")
  FOR doc IN FULLTEXT(@@coll, @search_attrkey, search_text__fulltext)
      FILTER @ts ? doc.created <= @ts AND doc.expired >= @ts : true
      FILTER LENGTH(filter_attr_expr) > 0 ? (
          FOR term IN filter_attr_expr
              RETURN MATCHES(doc, term)
      ) ANY == true : true
      LET attrval__norm = REGEX_REPLACE(LOWER(TRIM(doc.@search_attrkey)), "\\s+", " ")
      LET attrval__icu_toks = TOKENS(doc.@search_attrkey, "_system::icu_tokenize")
      SORT LIKE(doc.@search_attrkey, search_text__wildcard, true) DESC,  /* icu tok ordering */
          /* TODO - icu tok ordering with no insertions? */
          CONTAINS(attrval__icu_toks[0], search_text__icu_toks[0], true) == 0 DESC,  /* first icu tok */
          CONTAINS(attrval__norm, search_text__first_exact_tok, true) == 0 DESC,  /* first exact tok */
          CONTAINS(attrval__norm, search_text__norm, true) == 0 DESC,  /* exact match */
          doc.@search_attrkey  /* lexical */
      LIMIT @offset ? @offset : 0, @limit ? @limit : 20
      RETURN @select ? KEEP(doc, @select) : doc
